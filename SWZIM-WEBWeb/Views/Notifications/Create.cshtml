@model SWZIM_WEBWeb.Notifications

@{
    ViewBag.Title = "Create";
}

<section id="main-content">
    <section class="wrapper">

        <div class="row">
            <div class="col-lg-12">
                <!--breadcrumbs start -->
                <ul class="breadcrumb">
                    <li><a href="@Url.Action("Index", "Home")"><i class="icon_house_alt"></i> Home</a></li>
                    <li class="active"> Powiadomienia</li>
                </ul>
                <!--breadcrumbs end -->
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <section class="panel">
                    <header class="panel-heading">
                        Utwórz powiadomienie
                    </header>
                    <div class="panel-body">
                        @using (Html.BeginForm())
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">
                                <hr />
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @*<div class="form-group">
                                    @Html.LabelFor(model => model.ID, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.ID, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.ID, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@

                                @*<div class="form-group">
                                    @Html.LabelFor(model => model.UserId, "UserId", htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.DropDownList("UserId", null, htmlAttributes: new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                                    </div>
                                </div>*@

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Label, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Label, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Label, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Body, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        @Html.EditorFor(model => model.Body, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div id="PeoplePickerDiv"
                                    data-office-control="Office.Controls.PeoplePicker"
                                    data-office-options='{
                                        "allowMultipleSelections" : true,
                                        "onChange" : handleChange,
                                        "placeholder" : "Check the count message, it changes when you add people..."
                                    }'>
                                </div>
                                <span>Count : <span id="count">0</span></span>

                                @*<div class="form-group">
                                    @Html.LabelFor(model => model.IsRead, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-10">
                                        <div class="checkbox">
                                            @Html.EditorFor(model => model.IsRead)
                                            @Html.ValidationMessageFor(model => model.IsRead, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>*@

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <input type="submit" value="Create" class="btn btn-default" />
                                    </div>
                                </div>
                            </div>
                        }

                        <div>
                            @Html.ActionLink("Przejdź do listy powiadomień", "Index")
                        </div>
                    </div>
                </section>

            </div>
        </div>
    </section>
</section>

<script type="text/javascript">
        //Register namespace and variables used through the sample
        Type.registerNamespace("Office.Samples.PeoplePickerBasic");
        //Retrieve context tokens from the querystring
        Office.Samples.PeoplePickerBasic.appWebUrl =
            decodeURIComponent(getQueryStringParameter("SPAppWebUrl"));
        Office.Samples.PeoplePickerBasic.hostWebUrl =
            decodeURIComponent(getQueryStringParameter("SPHostUrl"));

        //Pattern to dynamically load JSOM and and the cross-domain library
        var scriptbase = Office.Samples.PeoplePickerBasic.hostWebUrl + "/_layouts/15/";

        $.getScript(scriptbase + "SP.RequestExecutor.js", //Get the cross-domain library
            //Get the Office controls runtime and continue to the createControl function
            function () { $.getScript("../Scripts/Office.Controls.js", createControl) }
        );
</script>
<script src="../Scripts/Office.Controls.PeoplePicker.js" type="text/javascript"></script>
<script type="text/javascript">
    function createControl() {
        //Initialize Controls Runtime
        Office.Controls.Runtime.initialize({
            sharePointHostUrl: Office.Samples.PeoplePickerBasic.hostWebUrl,
            appWebUrl: Office.Samples.PeoplePickerBasic.appWebUrl,
        });

        //Render
        Office.Controls.Runtime.renderAll();
    }

    //Event handler
    function handleChange(ctrl) {
        document.getElementById("count").textContent = ctrl.selectedItems.length.toString();
    }
</script>