@model PagedList.IPagedList<WpieSerwisInz.Models.EditUserViewModel>
@using PagedList.Mvc;
@using WpieSerwisInz.Models.BO.Dictionary
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />

@{
    ViewBag.Title = "Users";
}

<h2>Users List</h2>

<p>
    @Html.RouteLink("Create New", "AdminUsers", new { action = "UserCreate" })
</p>
@using (Html.BeginForm("Users", "Admin", FormMethod.Get))
{
    <p>
        Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Users" />
    </p>
}
<div class="table-responsive">
    <table class="table">
        <tr>
            <th>
                @Html.ActionLink("Login", "Users", new { sortOrder = ViewBag.LoginSortParm, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th>
                @Html.ActionLink("Last Name", "Users", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th>
                First Name
            </th>
            <th>
                @Html.ActionLink("Create Date", "Users", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th>
                Layer
            </th>
            <th>
                Roles
            </th>
            <th></th>
        </tr>


        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.UserName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreateDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Layer)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Roles)
                    @if (item.Roles.ToUpper().Contains(RoleType.Unconfirmed.ToUpper()))
                    {
                        @Html.RouteLink("Activate", "AdminUsersPar", new { action = "Activate", id = item.Id })
                    }
                </td>
                <td>
                    @Html.RouteLink("Edit", "AdminUsersPar", new { action = "UserEdit", id = item.Id })
                    @if (!item.Roles.ToUpper().Contains(RoleType.Unconfirmed.ToUpper()))
                    {
                        @Html.RouteLink("Role", "AdminUsersPar", new { action = "UserRoles", id = item.Id }) <text> </text>
                        @Html.RouteLink("Layer", "AdminUsersPar", new { action = "UserLayer", id = item.Id })
                    }
                    @Html.RouteLink("Delete", "AdminUsersPar", new { action = "UserDelete", id = item.Id })
                </td>
            </tr>
        }

    </table>
</div>
<br />
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

    @Html.PagedListPager(Model, page => Url.Action("Users",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))


